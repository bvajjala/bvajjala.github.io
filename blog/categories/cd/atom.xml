<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CD | Balaji Vajjala's Blog]]></title>
  <link href="http://bvajjala.github.io/blog/categories/cd/atom.xml" rel="self"/>
  <link href="http://bvajjala.github.io/"/>
  <updated>2014-04-15T18:49:49-04:00</updated>
  <id>http://bvajjala.github.io/</id>
  <author>
    <name><![CDATA[Balaji Vajjala]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A case study on using 100% cloud based Resources with Automated Software Delivery]]></title>
    <link href="http://bvajjala.github.io/blog/2014/04/04/a-case-study-on-using-100-percent-cloud-based-resources-with-automated-software-delivery/"/>
    <updated>2014-04-04T14:08:01-04:00</updated>
    <id>http://bvajjala.github.io/blog/2014/04/04/a-case-study-on-using-100-percent-cloud-based-resources-with-automated-software-delivery</id>
    <content type="html"><![CDATA[<h1>A Case Study on using 100% Cloud-based Resources with Automated Software Delivery</h1>

<p><a href="http://stelligent.com" title="Stelligent Continuous Delivery in the Cloud">We</a>
help – typically large – organizations create one-click software
delivery systems so that they can deliver software in a more rapid,
reliable and repeatable manner (AKA <a href="http://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912" title="Continuous Delivery book">Continuous
Delivery</a>).
The only way this works is when Development works with Operations. As
has been written elsewhere in this series, this means changing the
hearts and minds of people because most organizations are used to
working in ‘siloed’ environments. In this entry, I focus on
implementation, by describing a real-world case study in which we have
brought Continuous Delivery Operations to the Cloud consisting of a team
of Systems and Software Engineers.  </p>

<p>For years, we’ve helped customers in <a href="http://www.amazon.com/gp/product/0321336380/?tag=integratecom-20" title="Continuous Integration">Continuous
Integration</a>
and Testing so more of our work was with Developers and Testers. Several
years ago, we hired a Sys Admin/Engineer/DBA who was passionate about
automation. As a result of this, we began assembling multiple two-person
“<a href="http://en.wikipedia.org/wiki/DevOps" title="DevOps on Wikipedia">DevOps</a>”
teams consisting of a Software Engineer and a Systems Engineer both of
whom being big-picture thinkers and not just “Developers” or “Sys
Admins”. These days, we put together these targeted teams of Continuous
Delivery and Cloud experts with hands-on experience as Software
Engineers and Systems Engineers so that organizations can deliver
software as quickly and as often as the business requires.</p>

<p>A couple of years ago we already had a few people in the company who
were experimenting with using Cloud infrastructures so we thought this
would be a great opportunity in providing cloud-based delivery
solutions. In this case study, I cover a project we are currently
working on for a large organization. It is a new Java-based web services
project so we’ve been able to implement solutions using our recommended
software delivery patterns rather than being constrained by legacy tools
or decisions. However, as I note, we aren’t without constraints on this
project. If I were you, I’d call “BS!” on any “case study” in which
everything went flawlessly and assume it was an extremely small or a
theoretical project in the author’s mind. This is the real deal. Enough
said, on to the case study.      </p>

<p><img src="https://s3.amazonaws.com/stelligent_img/aws_tools.jpg" alt="AWS Tools" /></p>

<p><strong>Fast Facts</strong></p>

<p><strong>Industry</strong>: Healthcare, Public Sector\
<strong>Profile</strong>: The customer is making available to all, free of charge, a
series of software specifications and open source software modules that
together make up an oncology-extended Electronic Health Record
capability.\
<strong>Key Business Issues</strong>: The customer was seeking that all team members
are provided “unencumbered” access to infrastructure resources without
the usual “request and wait” queued-based procedures present in most
organizations \
<strong>Stakeholders</strong>: Over 100 people consisting of Developers, Testers,
Analysts, Architects, and Project Management.\
<strong>Solution:</strong> Continuous Delivery Operations in the Cloud\
<strong>Key Tools/Technologies</strong>: Amazon Web Services  - AWS (Elastic Computer
Cloud (EC2), (Simple Storage Service (S3), Elastic Block Storage (EBS),
etc.), Jenkins, JIRA Studio, Ant, Ivy, Tomcat and PostgreSQL</p>

<p><strong>The Business Problem</strong>\
The customer was used to dealing with long drawn-out processes with
Operations teams that lacked agility. They were accustomed to submitting
Word documents via email to an Operations teams, attending multiple
meetings and getting their environments setup weeks or months later. We
were compelled to develop a solution that reduced or eliminated these
problems that are all too common in many large organizations (Note: each
problem is identified as a letter and number, for example: P1, and
referred to later):</p>

<ol>
<li>Unable to deliver software to users on demand (P1)</li>
<li>Queued requests for provisioned instances (P2)</li>
<li>Unable to reprovision precise target environment configuration on
demand (P3)</li>
<li>Unable to provision instances on demand (P4)</li>
<li>Configuration errors in target environments presenting deployment
bottlenecks while Operations and Development teams troubleshoot
errors (P5)</li>
<li>Underutilized instances (P6)</li>
<li>No visibility into purpose of instance (P7)</li>
<li>No visibility into the costs of instance (P8)</li>
<li>Users cannot terminate instances (P9)</li>
<li>Increased Systems Operations personnel costs (P10)</li>
</ol>


<p><strong>Our Team</strong>\
We put together a four-person team to create a solution for delivering
software and managing the internal Systems Operations for this 100+
person project. We also hired a part-time Security expert. The team
consists of two Systems Engineers and two Software Engineers focused on
Continuous Delivery and the Cloud. One of the Software Engineers is the
Solutions Architect/PM for our team.</p>

<p><strong>Our Solution</strong>\
We began with the end in mind based on the customer’s desire for
unencumbered access to resources. To us, “unencumbered” did not mean
without controls; it meant providing automated services over queued
“request and wait for the Ops guy to fulfill the request” processes. Our
approach is that every resource is in the cloud: Software as a Service
(SaaS), Platform as a Service (PaaS) or Infrastructure as a Service
(IaaS) to reduce operations costs (P10) and increase efficiency. In
doing this, effectively all project resources are available on demand in
the cloud. We have also automated the software delivery process to
Development and Test environments and working on the process of
one-click delivery to production. I’ve identified the problem we’re
solving – from above – in parentheses (P1, P8, etc.). The solution
includes:</p>

<ul>
<li><strong>On-Demand Provisioning</strong> – All hardware is provided via EC2’s
virtual instances in the cloud, on demand (P2). We’ve developed a
“Provisioner” (PaaS) that provides any authorized team member the
capability to click a button and get their project-specific target
environment (P3) in the AWS’ cloud – thus, providing unencumbered
access to hardware resources. (P4) The Provisioner provides all
authorized team members the capability to monitor instance usage
(P6) and adjust accordingly. Users can terminate their own virtual
instances (P9).</li>
<li><strong>Continuous Delivery</strong> Solution so that the team can deliver
software to users on demand (P1):

<ul>
<li>Automated build script using Ant – used to drive most of the
other automation tools</li>
<li>Dependency Management using Ivy. We will be adding Sonatype
Nexus</li>
<li>Database Integration/Change using Ant and Liquibase</li>
<li>Automated Static Analysis using Sonar (with CheckStyle,
FindBugs, JDepend, and Cobertura)</li>
<li>Test framework hooks for running JUnit, etc.</li>
<li>Reusing remote Deployment custom Ant scripts that use Java
Secure Channel and Web container configuration. However, we will
be starting a process of using a more robust tool such as
ControlTier to perform deployment</li>
<li>Automated document generation using Grand, SchemaSpy (ERDs) and
UMLGraph</li>
<li>Continuous Integration server using Hudson</li>
<li>Continuous Delivery pipeline system – we are customizing Hudson
to emulate a Deployment Pipeline</li>
</ul>
</li>
<li><strong>Issue Tracking</strong> – We’re using the JIRA Studio SaaS product from
Atlassian (P10), which provides issue tracking, version-control
repository, online code review and a Wiki. We also manage the
relationship with the vendor and perform the user administration
including workflow management and reporting.</li>
<li><strong>Development Infrastructure</strong>&ndash; There were numerous tools selected
by the customer for Requirements Management and Test Management and
Execution including HP QC, LoadRunner, SoapUI, Jama Contour. Many of
these tools were installed and managed by our team onto the EC2
instances</li>
<li><strong>Instance Management</strong>&ndash; Any authorized team member is able to
monitor virtual instance usage by viewing a web-based dashboard (P6,
P7, P8) we developed. This helps to determine instances that should
no longer be in use or may be eating up too much money. There is a
policy that test instances (e.g. Sprint Testing) are terminated no
less than every two weeks. This promotes ephemeral environments and
test automation.</li>
<li><strong>Deployment to Production</strong> – Much of the pre-production
infrastructure is in place, but we will be adding some additional
automation features to make it available to users in production
(P1). The deployment sites are unique in that we aren’t hosting a
single instance used by all users and it’s likely the software will
be installed at each site. One plan is to deploy separate instances
to the cloud or to virtual instances that are shipped to the user
centers</li>
<li><p><strong>System Monitoring and Disaster Recovery</strong> – Using
<a href="https://www.cloudkick.com/" title="CloudKick AWS Monitoring">CloudKick</a>
to notify us of instance errors or anomalies. EC2 provides us with
some monitoring as well. We will be implementing a more robust
monitoring solution using Nagios or something similar in the coming
months. Through automation and supporting process, we’ve implemented
a disaster recovery solution.</p></li>
</ul>


<p><strong>Benefits</strong>\
The benefits are primarily around removing the common bottlenecks from
processes so that software can be delivered to users and team members
more often. Also, we think our approach to providing on-demand services
over queued-based requests increases agility and significantly reduces
costs. Here are some of the benefits:</p>

<ul>
<li><strong>Deliver software more often</strong> – to users and internally (testers,
managers, demos)</li>
<li><strong>Deliver software more quickly</strong> – since the software delivery
process is automated, we identify the SVN tag and click a button to
deliver the software to any environment</li>
<li><strong>Software delivery is rapid, reliable and repeatable</strong>. All
resources can be reproduced with a single click – source code,
configuration, environment configuration, database and network
configuration is all checked in and versioned and part of a single
delivery system.</li>
<li><strong>Increased visibility</strong> to environments and other resources – All
preconfigured virtual hardware instances are available for any
project member to provision without needing to submit forms or
attend countless meetings</li>
</ul>


<p><strong>Tools</strong>\
Here are some of the tools we are using to deliver this solution. Some
of the tools were chosen by our team exclusively and some by other
stakeholders on the project.</p>

<ul>
<li><a href="http://aws.amazon.com/ec2/" title="AWS EC2"><strong>AWS EC2</strong></a>&ndash; Cloud-based
virtual hardware instances</li>
<li><a href="http://aws.amazon.com/s3/" title="AWS S3"><strong>AWS S3</strong></a> – Cloud-based
storage. We use S3 to store temporary software binaries and backups</li>
<li><a href="http://aws.amazon.com/ebs/" title="AWS EBS"><strong>AWS EBS</strong></a> – Elastic Block
Storage. We use EBS to attach PostgreSQL data volumes</li>
<li><a href="http://ant.apache.org/" title="Ant"><strong>Ant</strong></a> – Build Automation</li>
<li><a href="https://www.cloudkick.com/" title="CloudKick"><strong>CloudKick</strong></a> – Real-time
Cloud instance monitoring</li>
<li><a href="http://controltier.com/" title="ControlTier"><strong>ControlTier</strong></a> –
Deployment Automation. Not implemented yet.</li>
<li><strong>HP LoadRunner</strong> – Load Testing</li>
<li><strong>HP Quality Center (QC)</strong> – Test Management and Orchestration</li>
<li><strong>Ivy</strong> – Dependency Management</li>
<li><strong>Jama Contor</strong>&ndash; Requirements Management</li>
<li><a href="http://jenkins-ci.org/" title="Jenkins"><strong>Jenkins</strong></a> – Continuous
Integration Server</li>
<li><a href="http://www.atlassian.com/hosted/studio/" title="JIRA Studio"><strong>JIRA
Studio</strong></a>&ndash;
Issue Tracking, Code Review, Version-Control, Wiki</li>
<li><strong>JUnit</strong> – Unit and Component Testing</li>
<li><a href="http://www.liquibase.org/" title="Liquibase"><strong>Liquibase</strong></a> – Automated
database change management</li>
<li><strong>Nagios</strong> – or Zenoss. Not implemented yet</li>
<li><strong>Nexus</strong> – Dependency Management Repository Manager (not
implemented yet)</li>
<li><strong>PostgreSQL</strong> – Database used by Development team. We’ve written
script that automate database change management</li>
<li><strong>Provisioner</strong> (Custom Web-based) – Target Environment Provisioning
and Virtual Instance Monitoring</li>
<li><a href="http://www.puppetlabs.com/" title="Puppet"><strong>Puppet</strong></a> – Systems
Configuration Management</li>
<li><strong>QTP</strong> – Test Automation</li>
<li><strong>SoapUI</strong> – Web Services Test Automation</li>
<li><a href="http://www.sonarsource.org/" title="Sonar"><strong>Sonar</strong></a> – code quality
analysis (Includes CheckStyle, PMD, Cobertura, etc.)</li>
<li><strong>Tomcat/JBoss</strong> – Web container used by Development. We’ve written
script to automate the deployment and container configuration</li>
</ul>


<p><strong>Solutions we’re in the process of Implementing</strong>\
We’re less than a year into the project and have much more work to do.
Here are a few projects we’re in the process or will be starting to
implement soon:</p>

<ul>
<li>System Configuration Management – We’ve started using Puppet, but we
are expanding how it’s being used in the future</li>
<li>Deployment Automation – The move to a more robust Deployment
automation tool such as ControlTier</li>
<li>Development Infrastructure Automation – Automating the provisioning
and configuration of tools such as HP QC in a cloud environment.
etc.</li>
</ul>


<p><strong>What we would do Differently</strong>\
Typically, if we were start a Java-based project and recommend tools
around testing, we might choose the following tools for testing,
requirements and test management based on the particular need:</p>

<ul>
<li>Selenium with
<a href="http://saucelabs.com/" title="SauceLabs Selenium">SauceLabs</a></li>
<li>JIRA Studio for Test Management</li>
<li>JIRA Studio for Requirements Management</li>
<li>JMeter – or other open source tool – for Load Testing</li>
</ul>


<p>However, like most projects there are many stakeholders who have their
preferred approach and tools they are familiar in using, the same way
our team does. Overall, we are pleased with how things are going so far
and the customer is happy with the infrastructure and approach that is
in place at this time. I could probably do another case study on dealing
with multiple SaaS vendors, but I will leave that for another post.</p>

<p><strong>Summary</strong>\
There’s much more I could have written about what we’re doing, but I
hope this gives you a decent perspective of how we’ve implemented a
DevOps philosophy with Continuous Delivery and the Cloud and how this
has led our customer to more a service-based, unencumbered and agile
environment. </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Delivery Implementation : Getting started with AWS]]></title>
    <link href="http://bvajjala.github.io/blog/2014/03/25/continuous-delivery-implementation-getting-started-with-aws/"/>
    <updated>2014-03-25T14:57:15-04:00</updated>
    <id>http://bvajjala.github.io/blog/2014/03/25/continuous-delivery-implementation-getting-started-with-aws</id>
    <content type="html"><![CDATA[<ul>
<li>Blog</li>
<li>This article is part of the Continuous Delivery Blueprints series.
It discusses how to go from no cloud infrastructure and no
continuous integration set up to having a functioning Continuous
Delivery Pipeline in Amazon Web Services. It discusses high level
topics while also providing a reference implementation so it’s easy
to follow along with.

<ul>
<li>Turn on CloudTrail</li>
<li>Turn on Programmatic Billing</li>
<li>If CloudTrail and Programmatic Billing are so important, why
aren’t they turned on by default?</li>
<li>Create IAM Users</li>
<li>Comments</li>
<li>Trackbacks</li>
<li>Post a comment</li>
<li>Categories</li>
</ul>
</li>
</ul>


<h1>This article is part of the Continuous Delivery Blueprints series. It discusses how to go from no cloud infrastructure and no continuous integration set up to having a functioning Continuous Delivery Pipeline in Amazon Web Services. It discusses high level topics while also providing a reference implementation so it’s easy to follow along with.</h1>

<p>Everyone is talking about migrating to the cloud these days, and getting
started with Amazon Web Services is super simple to do. However, most
people just rush in, creating headaches for themselves down the road.
There are some best practices you should take at the beginning of your
cloud migration that will make things easier, more secure, and allow you
to scale up and out better.</p>

<p>What we’re going to do today:</p>

<ul>
<li>• Create an AWS Account</li>
<li>• Turn On AWS CloudTrail</li>
<li>• Turn On Programmatic Billing</li>
<li>• Create IAM Users and Groups</li>
<li>• Add MFA for New Users</li>
</ul>


<p><strong>Create your AWS Account</strong></p>

<p>It all starts here: <a href="http://aws.amazon.com/">aws.amazon.com</a>. Find the
big sign up button and just follow the prompts. A couple of things to
note before getting started:</p>

<ol>
<li><ol>
<li>It’ll prompt you for your information (name, email, address, etc)
and credit card info, so you should get that figured out first.</li>
</ol>
</li>
<li><ol>
<li>You’ll need to verify your account via a phone call, so have your
phone handy.</li>
</ol>
</li>
<li><ol>
<li>You don’t need to sign up for support just yet.</li>
</ol>
</li>
</ol>


<p>Once you’re signed up, just login into the AWS console. The console
allows you to interact with most AWS services. Most people will start
building their servers in the sky right away, but there’s a bit of
information you should probably know up front, and some account set up
we recommend before getting started. Let’s go over that first.</p>

<p><strong>What You Need To Know About AWS Before Setting Stuff Up</strong></p>

<p>Amazon Web Services offers a lot of different services, from virtual
computing instances and storage to transcoding and streaming. Going over
each service would take a whole series of blog posts, but an
understanding of how AWS is laid out will be helpful when getting
started.</p>

<p>AWS has data centers all over the world, and has two ways of grouping
them. At global scale there are <strong>regions</strong>, representing parts of or
entire continents. Inside each region are <strong>availability zones</strong>.
Regions are completely distinct entities, and you can only work in one
at a time. Availability zones are designed to talk to each other, and
AWS will automatically spread your resources across availability zones.
Availability zones, however, can only speak to other zones within the
same region.</p>

<p>Choosing a region is important, though these directions are the same
more-or-less in every region. However, be aware that not all services
are available in all regions, and pricing does vary by region. In
addition to that, US-East-1 is the “default” zone when you start with
AWS, and has been around the longest. For that reason, it’s also the
most popular, and sometimes you won’t be able to allocate resources in
certain Availability Zones in the US-East-1 region due to those zones
being at capacity.</p>

<p>AWS provides <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html">lots of
documentation</a>
on how to choose a region, so definitely look through that to decide the
best place to host your infrastructure. If you’re just doing initial
investigation into AWS and aren’t sure what region to use, just pick one
close to you.</p>

<p><strong>Making a Name For Yourself</strong></p>

<p>We’ll be talking about several AWS services in this section, and many of
them make use of AWS Simple Storage Service, or <strong>S3</strong>. S3 allows you to
store objects in the cloud with a high degree of durability. Where S3
objects are stored are called “buckets”. S3 bucket names have to be
unique, not just across you account, but across the entire world. A
bucket name is globally unique. By the time we’re done, we’ll have
created a couple buckets, as well globally unique login URL. For that
reason, you should come up with a unique identifier now. For example,
when we tested this documentation, we used the identifier
“stelligent-cdblueprints.” Just note it down now and we’ll refer to it
as we go on.</p>

<h4>Turn on CloudTrail</h4>

<p>First thing is to turn on CloudTrail. CloudTrail is basically logging
for your AWS account. It will generate JSON files and store them in an
S3 bucket (Amazon’s cloud storage solution) every time an action is
performed on the account. While we won’t be doing a lot with CloudTrail
right away, we’re turning it on now because it’s not retroactive — you
can only see logs after you’ve turned it on. So let’s turn it on first.</p>

<p>(Quick note: CloudTrail is a relatively new service, and at the time of
this writing is only available in two regions: US-East-1 and US-West-2.
If you’re using a different region, you might not be able to turn
CloudTrail on. If that’s the case, just skip on to the next step.)</p>

<ol>
<li>Find CloudTrail panel from the main AWS Console,</li>
<li>Click Get Started and just punch in an S3 Bucket name. (As was
mentioned above, the S3 bucket name has to be globally unique. One
approach is to take the unique identifier you came up with before,
and just append -cloudtrail to it. We’ve named our bucket
“stelligent-cdblueprints-cloudtrail”.)</li>
<li>Click OK and you’re done.</li>
</ol>


<p>That was easy.</p>

<h4>Turn on Programmatic Billing</h4>

<p>Next, we’ll want to turn on Programmatic Billing. This will store your
AWS billing in JSON files in another S3 bucket, so that other services
can analyze your spending and plot trends over time. We’ll be visiting
those kind of tools later on, but we want to enable programmatic billing
now because (just like CloudTrail) it only generates data from the
present — there’s no way to go back and generate historical data. By
turning it on now, when we do start parsing that data for trends, you’ll
have a good amount of data to go back through.</p>

<p>Unlike CloudTrail, you’ll need to create and permission the bucket for
this yourself.</p>

<ol>
<li>Go to the S3 console so we can create a new bucket. (Taking your
previous unique identifier and just appending -billing to it isn’t a
bad idea. We’ve named ours “stelligent-cdblueprints-billing” to keep
with the theme.)</li>
<li>Click Create Bucket and punch that name in.</li>
<li>We’ll need to get a bucket permissions policy. Luckily, AWS will
generate that for us at this page (we’ll need to flip back to the S3
page in a second, so open this in a new
tab): <a href="https://portal.aws.amazon.com/gp/aws/developer/account?ie=UTF8&amp;action=billing-preferences">https://portal.aws.amazon.com/gp/aws/developer/account?ie=UTF8&amp;action=billing-preferences</a></li>
<li>Go down the list and turn everything on one and a time.</li>
<li>When you get to to Programmatic billing, punch in the name of
your bucket, and click “sample policy.” Just copy that policy, then
flip back to your S3 bucket.</li>
<li>Click on the bucket, then properties, then Permissions, and
you’ll see an option for setting an access policy.</li>
<li>Click into that, paste the policy you just copied, and save.</li>
<li>Now, flip back to the Billing Preferences page, click save there</li>
<li>Continue to enable everything else on this page.</li>
</ol>


<h4>If CloudTrail and Programmatic Billing are so important, why aren’t they turned on by default?</h4>

<p>One thing to be aware of with these two services is that they will put
data into your S3 buckets. S3 storage is very cheap, and while it is
pretty close, it is not free. You’ll be paying between nine and fifteen
cents a gig for storage, depending on region. For more details, <a href="https://aws.amazon.com/s3/pricing/">check
out the S3 pricing page</a>. The
services themselves don’t cost anything, though; you only pay for
storing the data they generate.</p>

<h4>Create IAM Users</h4>

<p>Now that the bookkeeping is taken care of, let’s set up some users. A
lot of new AWS users will start doing everything as the root account,
which besides being a bit of a security risk, also poses some issues
when you try to have multiple developers building solutions in your
cloud. That’s why we strongly recommend setting up IAM users and roles
from the beginning.</p>

<p>We’re going to use the AWS Identity and Access Management (IAM) console.
IAM allows you to create users, groups, and roles so that you can manage
users and access to your AWS account. For the first section, we’ll only
be creating one user (for you) and one group (admins) but as your usage
of the cloud increases and you need to add more users, you’ll be able to
control that from here.</p>

<p>To create a new admins group, head to the IAM console</p>

<ol>
<li>Click Create Group, and follow the prompts.</li>
<li>We’ll name the group “admins” and give it Administrator access.</li>
</ol>


<p>Now that we have an admins group, go to the Users panel and create a new
user for yourself to log in as. It’s pretty straightforward, and if you
hit any bumps in the road, <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_SettingUpUser.html">AWS has some pretty good documentation about
it</a>.</p>

<p>After you create the user, add it to the admins group. Then, for each
user we want to set up two types of authentication. The first is a
simple password. Under each users’ Security Credentials tab, click the
“Manage Passwords” button and you’ll be able to assign a password.</p>

<p>After each user logs in, you’ll want to require them to add a
multi-factor authentication (MFA) device to their account. To add an MFA
device</p>

<ol>
<li>the user will need to login and go to the IAM console</li>
<li>find their username</li>
<li>under the security credentials tab, select “Manage MFA device.”</li>
<li>Then follow the steps to add your virtual MFA device to the account.</li>
</ol>


<p>Having MFAs set up for all accounts helps ensure that AWS accounts won’t
be compromised, keeping your data safe. Also, it helps ensure that your
account won’t be used for malicious purposes (DDOS attacks, spam emails,
etc) which would at best would increase your AWS bill and worst case
have your entire account disabled. We strongly recommend enabling MFAs
for all user accounts.</p>

<p>Now that users are able to log in, we’ll need to give them a URL to do
so. If you go to the main IAM console, you’ll find a IAM User Sign-In
URL section. Remember the unique identifier you came up with your
CloudTrail and Programatic Billing buckets? That’s probably a good
option for your sign in URL. Changing it is optional, though highly
recommended.</p>

<p><strong>Wrapping Up</strong></p>

<p>Using AWS is easy; using it well takes some thought. By setting up
logging of your usage and billing information, you’ll be able to
identify trends as time goes on. By setting up groups and users, your
account is prepared to scale as you bring on more developers. And by
giving those users multi-factor authentication, you’ve helped ensure the
security of the account. You’re in a great place to start using the
cloud. In our next post, we’ll lay the foundations for building a
continuous delivery pipeline.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a Secure Deployment Pipeline in Amazon Web Services]]></title>
    <link href="http://bvajjala.github.io/blog/2014/03/23/creating-a-secure-deployment-pipeline-in-amazon-web-services/"/>
    <updated>2014-03-23T11:24:27-04:00</updated>
    <id>http://bvajjala.github.io/blog/2014/03/23/creating-a-secure-deployment-pipeline-in-amazon-web-services</id>
    <content type="html"><![CDATA[<p>Many organizations require a secure infrastructure. I’ve yet to meet a customer that says that security isn’t a concern. But, the decision on “how secure?” should be closely associated with a risk analysis for your organization.</p>

<p>Since Amazon Web Services (AWS) is often referred to as a “public cloud”, people sometimes infer that “public” must mean it’s “out in the public” for all to see. I’ve always seen “public/private clouds” as an
unfortunate use of terms. In this context, public means more like
“Public Utility”. People often interpret “private clouds” to be
inherently more secure. Assuming that “public cloud” = less secure and
“private cloud” = more secure couldn’t be further from the truth. Like
most things, it’s all about how you architect your infrastructure. While
you can define your infrastructure to have open access, AWS provides
many tools to create a truly secure infrastructure while eliminating
access to all but only authorized users.</p>

<p>I’ve created an initial list of many of the practices we use. We don’t
employ all these practices in all situations, as it often depends on our
customers’ particular security requirements. But, if someone asked me
“How do I create a secure AWS infrastructure using a Deployment
Pipeline?”, I’d offer some of these practices in the solution. I’ll be
expanding these over the next few weeks, but I want to start with some
of our practices.</p>

<p><strong>AWS Security</strong></p>

<p>* After initial AWS account creation and login, configure
<a href="https://aws.amazon.com/iam/" title="AWS IAM">IAM</a> so that there’s no need to
use the AWS root account\
 * Apply least privilege to all IAM accounts. Be very careful about who
gets Administrator access.\
 * Enable all IAM password rules\
 * Enable MFA for all users\
 * Secure all data at rest\
 * Secure all data in transit\
 * Put all AWS resources in a <a href="https://aws.amazon.com/vpc/" title="Virtual Private Cloud">Virtual Private
Cloud</a> (VPC).\
 * No EC2 Key Pairs should be shared with others. Same goes for Access
Keys.\
 * Only open required ports to the Internet. For example, with the
exception of, say, port 80, no security groups should have a CIDR Source
of 0.0.0.0/0). The bastion host might have access to port 22 (SSH), but
you should enable
<a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing" title="CIDR">CIDR</a>
to limit access to specific subnets. Using a VPC is a part of a solution
to eliminate Internet access. No canonical environments should have
SSH/RDP access.\
 * Use IAM to limit access to specific AWS resources and/or
remove/limit AWS console access\
 * Apply a bastion host configuration to reduce your attack profile\
 * Use <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html" title="IAM Roles">IAM
Roles</a>
so that there’s no need to configure Access Keys on the instances\
 * Use resource-level permissions in EC2 and RDS\
 * Use SSE to secure objects in S3 buckets\
 * Share initial IAM credentials with others through a secure mechanism
(e.g. <a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard" title="AES">AES-256
encryption</a>)\
 * Use and monitor AWS
<a href="https://aws.amazon.com/cloudtrail/" title="AWS CloudTrail">CloudTrail</a> logs</p>

<p><strong>Deployment Pipeline</strong></p>

<p>A deployment pipeline is a staged process in which the complete software
system is built and tested with every change. Team members receive
feedback as it completes each stage. With most customers, we usually
construct between 4-7 deployment pipeline stages and the pipeline only
goes to the next stage if the previous stages were successful. If a
stage fails, the whole pipeline instance fails. The first stage (often
referred to as the “Commit Stage”) will usually take no more than 10
minutes to complete. Other stages may take longer than this. Most stages
require no human intervention as the software system goes through more
extensive testing on its way to production. With a deployment pipeline,
software systems can be released at any time the business chooses to do
so. Here are some of the security-based practices we employ in
constructing a deployment pipeline.</p>

<p>* Automate everything: Networking (VPC, Route 53) Compute (EC2),
Storage, etc. All <em>AWS</em> automation should be defined in
<a href="https://aws.amazon.com/cloudformation/" title="CloudFormation">CloudFormation</a>.
All environment configuration should be defined using infrastructure
automation scripts – such as Chef, Puppet, etc.\
 * Version Everything: Application Code, Configuration, Infrastructure
and Data\
 * Manage your binary dependencies. Be specific about binary version
numbers. Ensure you have control over these binaries.\
 * Lockdown pipeline environments. Do not allow SSH/RDP access to any
environment in the deployment pipeline\
 * For project that require it, use permissions on the CI server or
Deployment application to limit who can run deployments in certain
environments – such as QA, Pre-Production and Production. When you have
a policy in which all changes are applied through automation and
environments are locked down, this usually becomes less of a concern.
But, it can still be a requirements on some teams.\
 * Use the Disposable Environments pattern – instances are terminated
once every few days. This approach reduces the attack profile\
 * Log everything outside of the EC2 instances (so that they can be
access later). Ensure these log files are encrypted e.g. securely
through S3)\
 * All canonical changes are only applied through automation that are
part of the deployment pipeline. This includes application,
configuration, infrastructure and data change. Infrastructure patch
management would be a part of the pipeline just like any outer software
system change.\
 * No one has access to nor can make direct changes to pipeline
environments\
 * Create high-availability systems Multi-AZ, <a href="https://aws.amazon.com/autoscaling/" title="Auto Scaling">Auto
Scaling</a>, <a href="https://aws.amazon.com/elasticloadbalancing/" title="ELB">Elastic
Load Balancing</a> and
Route 53\
 * For non-Admin AWS users, only provide access to AWS through a secure
<a href="https://en.wikipedia.org/wiki/Continuous_integration" title="Continuous Integration">Continuous
Integration</a>
(CI) server or a self-service application\
 * Use Self-Service Deployments and give developers full SSH/RDP access
to their self-service deployment. Only their particular EC2 Key Pair can
access the instance(s) associated with the deployment. Self-Service
Deployments can be defined in the CI server or a lightweight
self-service application.\
 * Provide capability for any authorized user to perform a self-service
deployment with full SSH/RDP access to the environment they created
(while eliminating outside access)\
 * Run two active environments – We’ve yet to do this for customers,
but if you want to eliminate all access to the canonical production
environment, you might choose to run two active environments at once so
that engineers can access the non-production environment to troubleshoot
a problem in which the environment has the exact same configuration and
data so you’re troubleshooting accurately.\
 * Run automated infrastructure tests to test for security
vulnerabilities (e.g. cross-site scripting, SQL injections, etc.) with
every change committed to the version-control repository as part of the
deployment pipeline.</p>

<p><strong>FAQ</strong></p>

<p>* <strong>What is a canonical environment?</strong> It’s your system of record. You
want your canonical environment to be solely defined in source code and
versioned. If someone makes a change to the canonical system and it
affects everyone it should only be done through automation. While you
can use a self-service deployment to get a copy of the canonical system,
any direct change you make to the environment is isolated and never made
part of the canonical system unless code is committed to the
version-control repository.\
 * <strong>How can I troubleshoot if I cannot directly access canonical
environments?</strong> Using a self-service deployment, you can usually
determine the cause of the problem. If it’s a data-specific problem, you
might import a copy of the production database. If this isn’t possible
for time or security reasons, you might run multiple versions of the
application at once.\
 * <strong>Why should we dispose of environments regularly?</strong> Two primary
reasons. The first is to reduce your attack profile (i.e. if
environments always go up and down, it’s more difficult to hone in on
specific resources. The second reason is that it ensures that all team
members are used to applying all canonical changes through automation
and not relying on environments to always be up and running somewhere.\
 * <strong>Why should we lockdown environments?</strong> To prevent people from
making disruptive environment changes that don’t go through the
version-control repository.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins Job Builder and How to Extned it]]></title>
    <link href="http://bvajjala.github.io/blog/2014/02/22/jenkins-job-builder-and-how-to-extned-it/"/>
    <updated>2014-02-22T08:57:36-05:00</updated>
    <id>http://bvajjala.github.io/blog/2014/02/22/jenkins-job-builder-and-how-to-extned-it</id>
    <content type="html"><![CDATA[<h1>What is jenkins job builder</h1>

<p>Jenkins job builder is extreme good tool to manage your jenkins CI jobs, it takes simple description from YAML files, and use them to configure jenkins.</p>

<pre><code>#set free style job
#job-template.yml
- job:
    name: testjob
    project-type: freestyle
    defaults: global
    disabled: false
    display-name: 'Fancy job name'
    concurrent: true
    quiet-period: 5
    workspace: /srv/build-area/job-name
    block-downstream: false
    block-upstream: false
</code></pre>

<p>Then put your jenkins access into jenkins.ini file</p>

<pre><code>[jenkins]
user=USERNAME
password=USER_TOKEN
url=JENKINS_URL
ignore_cache=IGNORE_CACHE_FLAG
</code></pre>

<p>Based on the job configuration above, you just need to type command</p>

<pre><code>$ jenkins-jobs --conf jenkins.ini update job-template.yaml 
</code></pre>

<p>Then your job <em>testjob</em> is created in your jenkins server.</p>

<p>The project is created by <a href="https://wiki.openstack.org/wiki/InfraTeam">openstack-infrastructure team</a>, it is used to manage the openstack environment, fairly good.</p>

<h1>How it works</h1>

<p>There is no magic behind it, <em>jenkins-jobs</em> just convert the <em>job-template.yaml</em> to jenkins XML request file, and use jenkins remote API to send create request.</p>

<p>Try to do below to understand this.</p>

<pre><code>$ jenkins-jobs test job-template.yaml -o .
</code></pre>

<p>Then xml file <em>testjob</em> is created, see</p>

<pre><code>&lt;?xml version="1.0" ?&gt;
&lt;project&gt;
  &lt;actions/&gt;
  &lt;description&gt;

&amp;lt;!-- Managed by Jenkins Job Builder --&amp;gt;&lt;/description&gt;
  &lt;keepDependencies&gt;false&lt;/keepDependencies&gt;
  &lt;disabled&gt;false&lt;/disabled&gt;
  &lt;displayName&gt;Fancy job name&lt;/displayName&gt;
  &lt;blockBuildWhenDownstreamBuilding&gt;false&lt;/blockBuildWhenDownstreamBuilding&gt;
  &lt;blockBuildWhenUpstreamBuilding&gt;false&lt;/blockBuildWhenUpstreamBuilding&gt;
  &lt;concurrentBuild&gt;true&lt;/concurrentBuild&gt;
  &lt;customWorkspace&gt;/srv/build-area/job-name&lt;/customWorkspace&gt;
  &lt;quietPeriod&gt;5&lt;/quietPeriod&gt;
  &lt;canRoam&gt;true&lt;/canRoam&gt;
  &lt;properties/&gt;
  &lt;scm class="hudson.scm.NullSCM"/&gt;
  &lt;builders/&gt;
  &lt;publishers/&gt;
  &lt;buildWrappers/&gt;
&lt;/project&gt;
</code></pre>

<p>Now you can use curl command to send the request (testjob) directly !!</p>

<pre><code>$ curl --user USER:PASS -H "Content-Type: text/xml" -s --data "@testjob" "http://jenkins-server/createItem?name=testjob"
</code></pre>

<h2>How to recreate your jenkins job</h2>

<p>Looks great, finally you need think about how to re-create your jenkins job, it is also simple, just download the config.xml</p>

<pre><code>$ curl --user USER:PASS http://jenkins-server/testjob/config.xml
</code></pre>

<p>Or open the configuration page in broswer *<a href="http://jenkins-server/testjob/configure*">http://jenkins-server/testjob/configure*</a> and map from YAML file.</p>

<p>You need to read <a href="http://ci.openstack.org/jenkins-job-builder/configuration.html">jenkins job builder&rsquo;s guideline</a> to know the map, generate it had level Macro like <a href="https://wiki.openstack.org/wiki/InfraTeam">builders</a>, which is connected to the <a href="https://github.com/openstack-infra/jenkins-job-builder/blob/master/jenkins_jobs/modules/builders.py">real python builders module</a> to do transformation from YAML to XML.</p>

<p>What you stated in YAML file like</p>

<pre><code>-job:
  name: test_job
  builders:
- shell: "make test"
</code></pre>

<p>it will be converted to</p>

<pre><code>&lt;builders&gt;
&lt;hudson.tasks.Shell&gt;
  &lt;command&gt;make test&lt;/command&gt;&lt;/hudson.tasks.Shell&gt;
&lt;/builders&gt;
</code></pre>

<h2>How to extend</h2>

<p>Greatly to see jenkins job builder already had lots of default modules to support your normal jenkins jobs, but there is exceptions like some none popular jenkins plugins or your own plugins.</p>

<p>Then it is time to extend the module, the existing document: Extending is not clear enough, I will use example to show how it works, code is in <a href="https://github.com/bv2012/jenkins-buddy">github jenkins-buddy</a> project</p>

<p><a href="https://wiki.jenkins-ci.org/display/JENKINS/ArtifactDeployer+Plugin">ArtifactDeployer</a> Plugin is used as example, this plugin is the popular plugin to deploy the artifacts to other folder.</p>

<p>Artifact Deploy Plugin</p>

<p><img src="../downloads/code/artifactdeploy.png" alt="" /></p>

<p>And I want to have .YAML like below</p>

<pre><code>*#artifactdeploy.yaml*
- job:
name: test-job
publishers:
  - artifactdeployer: 
  includes: 'buddy-*.tar.gz'
  remote: '/project/buddy'
</code></pre>

<h2>write codes to transform</h2>

<p>Now I need to download the existing jobs to see how XML looks like, using curl above, I got it like</p>

<pre><code>&lt;publishers&gt;
   ...  
  &lt;org.jenkinsci.plugins.artifactdeployer.ArtifactDeployerPublisher plugin="artifactdeployer@0.27"&gt;
&lt;entries&gt;
  &lt;org.jenkinsci.plugins.artifactdeployer.ArtifactDeployerEntry&gt;
&lt;includes&gt;buddy-*.tar.gz&lt;/includes&gt;
&lt;basedir&gt;&lt;/basedir&gt;
&lt;excludes&gt;&lt;/excludes&gt;
&lt;remote&gt;/project/buddy&lt;/remote&gt;
&lt;flatten&gt;false&lt;/flatten&gt;
&lt;deleteRemote&gt;false&lt;/deleteRemote&gt;
&lt;deleteRemoteArtifacts&gt;false&lt;/deleteRemoteArtifacts&gt;
&lt;deleteRemoteArtifactsByScript&gt;false&lt;/deleteRemoteArtifactsByScript&gt;
&lt;failNoFilesDeploy&gt;false&lt;/failNoFilesDeploy&gt;
  &lt;/org.jenkinsci.plugins.artifactdeployer.ArtifactDeployerEntry&gt;
&lt;/entries&gt;
&lt;deployEvenBuildFail&gt;false&lt;/deployEvenBuildFail&gt;
  &lt;/org.jenkinsci.plugins.artifactdeployer.ArtifactDeployerPublisher&gt;
..
&lt;/publishers&gt; 
</code></pre>

<p>It belongs the section publishers So I write the jenkins_buddy/modules/publishers.py module to add one function artifactdeployer:</p>

<pre><code>def artifactdeployer(parser, xml_parent, data):
    logger = logging.getLogger("%s:artifactdeployer" % __name__)
    artifactdeployer = XML.SubElement(xml_parent, 'org.jenkinsci.plugins.artifactdeployer.ArtifactDeployerPublisher')
    entries = XML.SubElement(artifactdeployer, 'entries')
    entry = XML.SubElement(entries, 'org.jenkinsci.plugins.artifactdeployer.ArtifactDeployerEntry')
    print data
    XML.SubElement(entry, 'includes').text = data['includes']
    XML.SubElement(entry, 'remote').text = data['remote']
</code></pre>

<p>It is the core part handling convert.</p>

<h3>Hook into jenkins-job builder</h3>

<p>Now you need hook this script into jenkins-jobs builder, thank for the entry_points in python, it can be used for this.</p>

<p>Create the plugin related script and structure, add new entry_point in setup.py</p>

<pre><code>#setup.py in jenkins-buddy
entry_points={
    'jenkins_jobs.publishers': [
    'artifactdeployer=jenkins_buddy.modules.publishers:artifactdeployer',
    ],
}
</code></pre>

<p>it tells jenkins-jobs if you meet new keyword artifactdeployer in publishers, please let me jenkins_buddy.modules.publishers:artifactdeployer to handle.</p>

<h3>Verify it</h3>

<p>Build the pip package local and install it</p>

<pre><code>$ python setup.py sdist
$ pip install dist/jenkins-buddy-0.0.5.zip
</code></pre>

<p>And verify the new job, Bingo, it works.</p>

<pre><code>$ jenkins-jobs test artifactdeploy.yaml -o . 
</code></pre>

<h3>###Make it more complete by checking jenkins plugin java code</h3>

<p>Maybe you noticed, it is hack solution, since I skipped some parameter converting and guess what the XML will look like, if you want to make it more complete, we need to check the java codes directly.</p>

<p>src/main/java/org/jenkinsci/plugins/artifactdeployer/ArtifactDeployerPublisher.java is the class we need to take care.</p>

<pre><code>@DataBoundConstructor
public ArtifactDeployerPublisher(List&lt;ArtifactDeployerEntry&gt; deployedArtifact, boolean deployEvenBuildFail) {
    this.entries = deployedArtifact;
    this.deployEvenBuildFail = deployEvenBuildFail;
    if (this.entries == null)
    this.entries = Collections.emptyList();
}
</code></pre>

<p>It is directly mapping from XML into internal data, if you need know more, learn how to develop jenkins plugin.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy/Release Workflow from GitHub]]></title>
    <link href="http://bvajjala.github.io/blog/2014/02/04/deploy-slash-release-workflow-from-github/"/>
    <updated>2014-02-04T09:50:50-05:00</updated>
    <id>http://bvajjala.github.io/blog/2014/02/04/deploy-slash-release-workflow-from-github</id>
    <content type="html"><![CDATA[<h1>## Workflow : Deploying/Release Apps from Development to Production  ##</h1>

<p>Deploying is a big part of the lives of most of our Engineering employees. We don&rsquo;t have a release manager and there are no set weekly deploys. Developers and designers are responsible for shipping new stuff themselves as soon as it&rsquo;s ready. This means that deploying needs to be as smooth and safe a process as possible.</p>

<p>The best system we&rsquo;ve found so far to provide this flexibility is to have people deploy branches. Changes never get merged to master until they have been verified to work in production from a branch. This means that master is always stable; a safe point that we can roll back to if there&rsquo;s a problem.</p>

<p>The basic workflow goes like this:</p>

<ul>
<li>Push changes to a branch in GitHub</li>
<li>Wait for the build to pass on our CI server (Jenkins)</li>
<li>Tell Hubot to deploy it</li>
<li>Verify that the changes work and fix any problems that come up</li>
<li>Merge the branch into master
Not too long ago, however, this system wasn&rsquo;t very smart. A branch could accidentally be deployed before the build finished, or even if the build failed. Employees could mistakenly deploy over each other. As the company has grown, we&rsquo;ve needed to add some checks and balances to help us prevent these kinds of mistakes.</li>
</ul>


<h2>Safety First</h2>

<p>The first thing we do now, when someone tries to deploy, is make a call to <a href="https://github.com/github/janky">Janky</a> to determine whether the current CI build is green. If it hasn&rsquo;t finished yet or has failed, we&rsquo;ll tell the deployer to fix the situation and try again.</p>

<p>Next we check whether the application is currently &ldquo;locked&rdquo;. The lock indicates that a particular branch is being deployed in production and that no other deploys of the application should proceed for the moment. Successful builds on the master branch would otherwise get deployed automatically, so we don&rsquo;t want those going out while a branch is being tested. We also don&rsquo;t want another developer to accidentally deploy something while the branch is out.</p>

<p>The last step is to make sure that the branch we&rsquo;re deploying contains the latest commit on master that has made it into production. Once a commit on master has been deployed to production, it should never be “removed” from production by deploying a branch that doesn’t have that commit in it yet.</p>

<p>We use the GitHub API to verify this requirement. An endpoint on the github.com application exposes the SHA1 that is currently running in production. We submit this to the GitHub compare API to obtain the &ldquo;merge base&rdquo;, or the common ancestor, of master and the production SHA1. We can then compare this to the branch that we&rsquo;re attempting to deploy to check that the branch is caught up. By using the common ancestor of master and production, code that only exists on a branch can be removed from production, and changes that have landed on master but haven&rsquo;t been deployed yet won&rsquo;t require branches to merge them in before deploying.</p>

<p>If it turns out the branch is behind, master gets merged into it automatically. We do this using the new :sparkles:Merging API:sparkles: that we&rsquo;re making available today. This merge starts a new CI build like any other push-style event, which starts a deploy when it passes.</p>

<p>At this point the code actually gets deployed to our servers. We usually deploy to all servers for consistency, but a subset of servers can be specified if necessary. This subset can be by functional role — front-end, file server, worker, search, etc. — or we can specify an individual machine by name, e.g, &lsquo;fe7&rsquo;.</p>

<h2>Watch it in action</h2>

<p>What now? It depends on the situation, but as a rule of thumb, small to moderate changes should be observed running correctly in production for at least 15 minutes before they can be considered reasonably stable. During this time we monitor exceptions, performance, tweets, and do any extra verification that might be required. If non-critical tweaks need to be made, changes can be pushed to the branch and will be deployed automatically. In the event that something bad happens, rolling back to master only takes 30 seconds.</p>

<h2>All done!</h2>

<p>If everything goes well, it&rsquo;s time to merge the changes. At GitHub, we use Pull Requests for almost all of our development, so merging typically happens through the pull request page. We detect when the branch gets merged into master and unlock the application. The next deployer can now step up and ship something awesome.</p>

<h1>How do we do it?</h1>

<p>Most of the magic is handled by an internal deployment service called Heaven. At its core, Heaven is a catalog of Capistrano recipes wrapped up in a Sinatra application with a JSON API. Many of our applications are deployed using generic recipes, but more complicated apps can define their own to specify additional deployment steps. Wiring it up to Janky, along with clever use of post-receive hooks and the GitHub API, lets us hack on the niceties over time. Hubot is the central interface to both Janky and Heaven, giving everyone in Campfire great visibility into what’s happening all of the time. As of this writing, 75 individual applications are deployed by Heaven.</p>
]]></content>
  </entry>
  
</feed>
