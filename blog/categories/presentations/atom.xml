<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Presentations | Balaji Vajjala's Blog]]></title>
  <link href="http://bvajjala.github.io/blog/categories/presentations/atom.xml" rel="self"/>
  <link href="http://bvajjala.github.io/"/>
  <updated>2014-04-21T11:32:01-04:00</updated>
  <id>http://bvajjala.github.io/</id>
  <author>
    <name><![CDATA[Balaji Vajjala]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Practical Continuous Deployment]]></title>
    <link href="http://bvajjala.github.io/blog/2014/04/21/practical-continuous-deployment/"/>
    <updated>2014-04-21T11:18:15-04:00</updated>
    <id>http://bvajjala.github.io/blog/2014/04/21/practical-continuous-deployment</id>
    <content type="html"><![CDATA[<p>{% slide %}</p>

<h2>Practical continuous deployment</h2>

<h3>Balaji Vajjala</h3>

<h5>Principal DevOps Consultant/Solution Architect</h5>

<h5>Feb 2014</h5>

<p>{% notes %}</p>

<p>Hi, my name is Balaji Vajjala and I&rsquo;m the Chief Architet and DevOps Solution Architect.</p>

<p>I have been developing software in the financial and Telecom industry since Mid 90&rsquo;s. Passionate about technology, I have delivered a diverse project portfolio initially as a software developer and subsequently as a leader of development organisations.</p>

<p>{% slide %}</p>

<h3>DevOps</h3>

<ul>
<li>Continuous Deployment</li>
<li>Continuous Delivery</li>
<li>Continuous Integration</li>
</ul>


<p>{% notes %}</p>

<p>I don&rsquo;t have to tell you guys about DevOps, but for our purposes the main point is that we can do more stuff using the DevOps principles and Deliver software ina Agile Fashion.</p>

<p>{% slide %}</p>

<h3>￼Who Am I?</h3>

<p>• Balaji Vajjala!
• A Full Stack DevOps Engineer/Solution Architect for 10+ years!
• Original company sysadmin!
• Developer for last 4 years!
• Now working out of East Coast
• Not a professional speaker</p>

<p>{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼What I’ve been up to&hellip;</h3>

<p>• Last 6 months converting our order systems to high-availability and continuous deployment.</p>

<p>{% slide %}
￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼What I’ve been up to&hellip;</h3>

<p>• Last 6 months converting our order systems to high-availability and continuous deployment.!
• Why 6 months? Because the concept is straightforward, but it’s implications affect a lot of your organisation.</p>

<p>{% slide %}
￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼“Deployment”? “Delivery”?</h3>

<p>• Continuous integration is continuous, automated build and test.!
• Continuous delivery is the next obvious step; be continuously release-ready.!
• Continuous deployment is the final step, the continuous delivery of software to production.</p>

<p>{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼“Deployment”? “Delivery”?</h3>

<p>• Constant QA is the common theme.!
• In practice there’s a continuous spectrum of options, each organisation has different needs and constraints.!
• But if you trust your testing and process you can adopt the level appropriate for you.</p>

<p>{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼Why Continuous deployment?</h3>

<p>• We want to release features, not “what ever happens to be done”!
• Automation: Releasing is hard, automation makes it repeatable!
• Remove organisational bottlenecks to releases</p>

<p>{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼Stakeholder benefits</h3>

<p>• To customers: You’ll get your requested feature faster!!
• To management: You’ll get results faster and clearer progress.!
• To devs: No more death-marches, mad- dashes, clean-up after releases.!
• To admins: You know which change broke the system!</p>

<p>{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼So how do you actually do it?</h3>

<p>• Continuous deployment guides tend to focus on the high-level philosophy!
• But how do you actually get a feature from a customer request to your servers?</p>

<p>{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼Development workflow</h3>

<p>• Continuous deployment implies a clearer development process.!
• You need to know what is going out when you release, not a dump of the current state.!
• Hence release by feature</p>

<p>{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼Development</h3>

<p>• Track your feature requests in a bug tracker!
• Branch on each feature, automatically test!
• Pull requests for code-review/merge!
• Automatic release to staging on each merge!
• Promote from staging to production</p>

<p>{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼Step 1: Track your requests</h3>

<p>• Each feature/update request should have a unique ID.!
• This allows tracking the state of a feature from request to deployment.!
• Bug-trackers are a good choice for this.
￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼￼￼Step 2: Work on this feature in a branch</h3>

<p>• Create a branch for just this feature!
• Name it after the feature request!
• Jira/Stash integration will do this!
• The branch will be merged when complete!
• You need a sane version control system!
• We use git, Mercurial is good too
￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼￼￼Step 3: Automatically test the branch</h3>

<p>• Run a continuous integration tool that will automatically run tests against the branch.!
• Features may not be merged until all tests are passing.!
• Stash has some features to support this.
￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼￼￼Step 4: Code review</h3>

<p>• No code may be merged to the release branch until reviewed by other members of the team.!
• Team members have a responsibility to ensure quality.
￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼￼￼Step 4.1: Stash testing integration</h3>

<p>￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼￼￼Step 5: Merge and release</h3>

<p>• Once all reviews and tests are passed them merge to release branch!
• At this point we have a separate Bamboo plan that performs a full release.
￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼￼￼Step 6: Deploy to staging</h3>

<p>• Allows testing of more advanced interactions and against production samples.!
• More testing can occur at this point, including testing by humans.
￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼￼￼Step 7: Release to production</h3>

<p>• Valid staging builds may be promoted up to production.
￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼￼￼Segue: “Continuous downtime”?</h3>

<p>• So if you’re doing all these releases, what about uptime?!
• For public-facing service clustering/HA is important.!
• Ideally you should be able to automate cluster configuration as part of the deployment
￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼￼￼Last mile</h3>

<p>￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼￼￼Practical issue</h3>

<p>• How do you actually get releases onto your staging and production servers?!
• AKA “the last-mile problem”
￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼￼￼Last mile</h3>

<p>• Puppet/Chef are not appropriate!
• For simple/single-node applications you
can use a Bamboo agent directly!
• For more complex setups use an automation tool
￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼￼￼Last mile</h3>

<p>• Puppet/Chef are not appropriate!
• .. if timing is critical!
• .. if cross-host coordination required
￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼￼￼Last mile</h3>

<p>• Roll your own!
• Bamboo SSH plugin + bash scripting!
• Number of existing automation solutions!
• func, capistrano, SaltStack, Ansible, mcollective, Fabric&hellip;
￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼￼￼Last mile</h3>

<p>• Bamboo agent per-node!
• SSH not required!
• Works for simple (single node) apps! • Coordination is tricky
￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼￼￼Last mile</h3>

<p>• Agent-based frameworks!
• Powerful and flexible!
• Can parallelise deployments!
• Requires setup on all nodes!
• If you already have it setup then use it
￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼￼￼Last mile</h3>

<p>• SSH scripting!
• Requires management of SSH keys on agent!
• Bamboo SSH plugin!
• Scripting (Bash, Python, Ruby, etc.)!
• Automation frameworks (Ansible, SaltStack, Func, Fabric)
￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼￼￼Last mile</h3>

<p>• Our solution!
• Ansible for automation (explicit support for load-balancer integration)!
• Minimal requirements, SSH+Python!
• Bamboo pulls Ansible directly from their source repository!
• Ansible playbooks checked into git
￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼￼￼Practical issue</h3>

<p>• How do you manage what has been released, and to where?!
• How do you control who performs deployments?
￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼￼￼Bamboo deployment environments</h3>

<p>• The release build plan can be associated with certain environments!
• Normal ones are dev, staging (QA) and production
￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼￼￼Bamboo deployment environments</h3>

<p>￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼￼￼Bamboo deployment environments</h3>

<p>• Environment has tasks, like a build plan!
• Tasks perform the actual deployment!
• Environments have permissions, limiting who may perform deployments!
• Generates releases, which are deployed!
• Has some nice integrations&hellip;
￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼￼￼Bamboo deployment release</h3>

<p>￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼￼￼Bamboo deployment JIRA integration</h3>

<p>￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼￼￼Procedural issues</h3>

<p>• Where’s the oversight in all this?!
• What about SoX, PCI, SEC requirements?!
• Who is allowed to do releases?!
• Who signs off?
￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼￼￼Procedural issues</h3>

<p>• Our solution &ndash; separate the infrastructure!
• Dedicated Bamboo server for business software!
• Dedicated agents for building!
• Separate, dedicated agents for deployment
￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼￼￼Procedural issues</h3>

<p>• Access controls!
• Build team/admins control the server!
• Business analysts define features!
• Devs code, review, merge and release!
• Features pushed to staging for BA review!
• BAs can promote releases to production
￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼￼Questions?</h3>

<p>￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼
Balaji Vajjala
@bvajjala <a href="&#x6d;&#x61;&#105;&#108;&#x74;&#111;&#x3a;&#98;&#x76;&#97;&#106;&#106;&#97;&#x6c;&#97;&#x40;&#x67;&#109;&#97;&#x69;&#108;&#x2e;&#99;&#x6f;&#109;">&#x62;&#118;&#x61;&#x6a;&#106;&#x61;&#108;&#97;&#x40;&#x67;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#x6d;</a>
<a href="http://bvajjala.github.io/">http://bvajjala.github.io/</a></p>

<p>{% slide %}￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼￼</p>

<h3>￼￼Thanks!</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[my first presentation]]></title>
    <link href="http://bvajjala.github.io/blog/2014/04/17/my-first-presentation/"/>
    <updated>2014-04-17T15:41:59-04:00</updated>
    <id>http://bvajjala.github.io/blog/2014/04/17/my-first-presentation</id>
    <content type="html"><![CDATA[<p>{% slide %}</p>

<h2>Practical continuous deployment</h2>

<h3>Balaji Vajjala</h3>

<h5>Principal DevOps Consultant/Solution Architect</h5>

<h5>Feb 2014</h5>

<p>{% notes %}</p>

<p>Hi, my name is Balaji Vajjala and I&rsquo;m the Chief Architet and DevOps Solution Architect.</p>

<p>I have been developing software in the financial and Telecom industry since Mid 90&rsquo;s. Passionate about technology, I have delivered a diverse project portfolio initially as a software developer and subsequently as a leader of development organisations.</p>

<p>{% slide %}</p>

<h3>DevOps</h3>

<ul>
<li>Continuous Deployment</li>
<li>Continuous Delivery</li>
<li>Continuous Integration</li>
</ul>


<p>{% notes %}</p>

<p>I don&rsquo;t have to tell you guys about DevOps, but for our purposes the main point is that we can do more stuff using the DevOps principles and Deliver software ina Agile Fashion.</p>

<p>{% slide %}</p>

<h2>Thanks!</h2>
]]></content>
  </entry>
  
</feed>
