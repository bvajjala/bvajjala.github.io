<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Continuous Integration | Balaji Vajjala's Blog]]></title>
  <link href="http://bvajjala.github.io/blog/categories/continuous-integration/atom.xml" rel="self"/>
  <link href="http://bvajjala.github.io/"/>
  <updated>2014-05-01T11:52:50-04:00</updated>
  <id>http://bvajjala.github.io/</id>
  <author>
    <name><![CDATA[Balaji Vajjala]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Best Practices of Continuous Integration]]></title>
    <link href="http://bvajjala.github.io/blog/2014/04/22/best-practices-of-continuous-integration/"/>
    <updated>2014-04-22T10:41:40-04:00</updated>
    <id>http://bvajjala.github.io/blog/2014/04/22/best-practices-of-continuous-integration</id>
    <content type="html"><![CDATA[<h1>What is Continuous Integration</h1>

<p><em>Martin Fowler has the best description of CI</em></p>

<p>  Continuous Integration is a software development practice where members of a team integrate their work frequently, usually each person integrates at least daily &ndash; leading to multiple integrations per day. Each integration is verified by an automated build (including test) to detect integration errors as quickly as possible. Many teams find that this approach leads to significantly reduced integration problems and allows a team to develop cohesive software more rapidly.</p>

<!-- more -->


<h1>Best Practices of Continuous Integration</h1>

<h2>1. Maintain a Single Source Repositry</h2>

<ul>
<li> Use SCM tools like Git, Subversion, Perforce for all Software Projects that need to be orchestarted together to build a product</li>
<li> Put everything that is required for a build in the SCM system and this should include: test scripts,properties files, database schema, install scripts, and third party libraries.</li>
<li> Keep your use of  branches to a minimum. Have a <em>mainline</em>: a single branch of the project under developemnt.</li>
<li><p> Don&rsquo;t add build artifacts/binaries to the SCM system. It only indicates the inability to reliabily recreate builds and absence of any Depndency management Solution.</p>

<p><strong>Tools Used : Git, SVN, Perforce, hg</strong></p></li>
</ul>


<h2>2. Automate the Build</h2>

<ul>
<li> Automate all phases of Build including Compilation, moving files aound, loading schema into the databases.</li>
<li><p> Only Build what has changed. Looks for dates of the source and object files and only compile if the source date is later</p>

<p><strong>Tools Used : Ant, Maven</strong></p></li>
</ul>


<h2>3. Make your Build Self-Testing</h2>

<ul>
<li><p>Use Test-Driven-Development (TDD) approaches to catch bugs in the code-base. These tests needs to be self-testing. For a build to be self-testing the failure of a test should cause the build to fail.</p>

<p><strong>Tools Used : XUnit family, FIT, Selenium,Sahi,Watir, FITnesse</strong></p></li>
</ul>


<h2>4. Everyone Commits to the mainline Every Day</h2>

<ul>
<li>Integration is primarily about Communication. Diing integration regularly allows the developers to tell others about the changes they have made and allow others to quickly react to the changes. The only prerequiste for a developer committing to the mailibe is that they can correctly build their code. This includes passing the build tests</li>
<li>Every Developer should commit to the repository every day. The more frequest they commit, the less places they have to look for conflict errors, and more rapidly they can then fix the conflicts</li>
</ul>


<h2>5. Every Commit Should Build the Mainline on an Integration Machine</h2>

<ul>
<li>Using Daily commits, a team gets frequent tested builds and this means that the <em>mainline</em> is always in <em>Ready-to-Release</em> state.</li>
<li>Use CI Server. A CI server acts as a monitor to the repository. Every time a commit against the repository finishes the CI server automatically checks out the sources onto the integration machine, initiates a build, and notifies the committer of the result of the build. The committer isn&rsquo;t done until she gets the notification &ndash; usually an email.</li>
</ul>


<p><strong>Tools Used : Jenkins/Hudson, Bamboo, TeamCity</strong></p>

<h2>6. Keep the Build Fast</h2>

<ul>
<li>Rather than having a monolithic single build which covers all phases of the build: Commit builds, Unit Tests builds, Code Coverage and Analysis, split the build pipeline into two stages. the first stage is the commit build and used as as the main CI cycle. The second-stage build runs when it can, picking up the executable from the latest good commit build for further testing. If this secondary build fails, then this may not have the same &lsquo;stop everything&rsquo; quality, but the team does aim to fix such bugs as rapidly as possible, while keeping the commit build running.</li>
<li>Keep the <em>commit build</em> times to be less than 10 mins. The <em>commit build</em> is the build that&rsquo;s needed when someone commits to the mainline</li>
<li>Parallize test stage by running the tests on multiple machines that run half the tests each.</li>
</ul>


<h2>7. Test in a Clone of the Production Environment</h2>

<ul>
<li>Use virtualization to put together test environments that mimics the Production Environment. Virtualized machines can be saved with all the necessary elements baked into the virtualization. It&rsquo;s then relatively straightforward to install the latest build and run tests. Furthermore this can allow you to run multiple tests on one machine, or simulate multiple machines in a network on a single machine.</li>
</ul>


<h2>8. Make it easy for Anyone to get the latest Executables</h2>

<ul>
<li> Store all build Executables/Installers in a centralized location, easily accessible to anyone involved with the software project. All Stakeholders should be easily be able to get the latest executable and be able to run it.</li>
</ul>


<h2>9. Everyone can see what&rsquo;s happening</h2>

<ul>
<li>CI is all about communication. Create a Dashboard or Wiki page where everone can easily see the state of the system and the changes that have been made to it.</li>
<li>Important thing to communicate is the stae of the mainline build. The Dashboard/Web Site should show if there&rsquo;s a build in progress and what was the last state of the mainline build.</li>
</ul>


<h2>10. Automate Deployment</h2>

<ul>
<li>To do effective Continuous Integration one needs multiple environments, one to run commit tests, one or more to run secondary tests. Since this involves moving executables between these environments multiple times a day, hence the need for Automation. So it&rsquo;s important to have scripts that will allow you to deploy the application into any environment easily.</li>
</ul>


<h1>Summary</h1>

<ul>
<li>Look for frequent builds to be triggered by code commits and to not take more than 15 minutes to run.</li>
<li>Keep builds simple and chain them together if more complexity is required. Simpler and quicker builds encourage more frequent use and are easier to debug when they break.</li>
<li>Prioritise fixing broken builds over starting new development work.</li>
<li>Identify failures sooner</li>
<li>Identify culprit change precisely</li>
<li>Avoids divide-and-conquer and tribal knowledge</li>
<li>Lowers compute costs using fine grained dependencies</li>
<li>Keeps the build green by reducing time to fix breaks</li>
<li>Accepted enthusiastically by product teams</li>
<li>Enables teams to ship with fast iteration times</li>
<li>Chain simple Jenkins jobs rather than trying to do everything in one big job.</li>
<li>Configure Jenkins as master + slaves.</li>
</ul>

]]></content>
  </entry>
  
</feed>
