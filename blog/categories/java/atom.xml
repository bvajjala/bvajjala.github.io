<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Balaji Vajjala's Blog]]></title>
  <link href="http://bvajjala.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://bvajjala.github.io/"/>
  <updated>2014-05-01T11:34:03-04:00</updated>
  <id>http://bvajjala.github.io/</id>
  <author>
    <name><![CDATA[Balaji Vajjala]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Multimethods in Groovy]]></title>
    <link href="http://bvajjala.github.io/blog/2011/06/05/multimethods-in-groovy/"/>
    <updated>2011-06-05T08:00:00-04:00</updated>
    <id>http://bvajjala.github.io/blog/2011/06/05/multimethods-in-groovy</id>
    <content type="html"><![CDATA[<p>Every time I switch from Groovy to Java I have to remind myself that some things that seem so natural and work as expected in Groovy, don&rsquo;t work in Java. One of such differences is method dispatching. Groovy supports <a href="http://en.wikipedia.org/wiki/Multiple_dispatch">multiple dispatch</a>, while Java does not. Therefore the following <a href="http://www.gigamonkeys.com/book/object-reorientation-generic-functions.html#multimethods">code</a> works differently in Groovy and Java:</p>

<pre><code>public class A {
    public void foo(A a) { System.out.println("A/A"); }
    public void foo(B b) { System.out.println("A/B"); }
}
public class B extends A {
    public void foo(A a) { System.out.println("B/A"); }
    public void foo(B b) { System.out.println("B/B"); }
}
public class Main {
    public static void main(String[] args) {
        A a = new A();
        A b = new B();
        a.foo(a);
        b.foo(b);
    }
}

$ java Main
A/A
B/A

$ groovy Main.groovy
A/A
B/B
</code></pre>
]]></content>
  </entry>
  
</feed>
