<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: berkshelf | Balaji Vajjala's Blog]]></title>
  <link href="http://bvajjala.github.io/blog/categories/berkshelf/atom.xml" rel="self"/>
  <link href="http://bvajjala.github.io/"/>
  <updated>2014-04-17T12:44:58-04:00</updated>
  <id>http://bvajjala.github.io/</id>
  <author>
    <name><![CDATA[Balaji Vajjala]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating immutable servers with chef and docker.io]]></title>
    <link href="http://bvajjala.github.io/blog/2013/09/07/creating-immutable-servers-with-chef-and-docker-dot-io/"/>
    <updated>2013-09-07T18:18:00-04:00</updated>
    <id>http://bvajjala.github.io/blog/2013/09/07/creating-immutable-servers-with-chef-and-docker-dot-io</id>
    <content type="html"><![CDATA[<p>Building applications in a <a href="http://docker.io">docker.io</a> Dockerfile is relatively simple,  but sometimes you want to just install the application exactly as you would normally via already built chef cookbooks.   Turns out this is actually pretty simple.</p>

<p>The first thing you&rsquo;ll need to do is build a container with chef-client and berkshelf installed.   You can grab the one I&rsquo;ve built by running <code>docker pull paulczar/chef-solo</code> or build one youself from a <code>Dockerfile</code> that looks a little something like the following&hellip;</p>

<!--more-->


<h3>Creating a docker.io container with chef and berkshelf</h3>

<p>``` ruby Dockerfile</p>

<h1>DOCKER-VERSION 0.5.3</h1>

<p>FROM ubuntu:12.10
MAINTAINER Paul Czarkowski &ldquo;<a href="&#109;&#x61;&#105;&#108;&#x74;&#111;&#58;&#x70;&#x61;&#117;&#x6c;&#x40;&#x70;&#x61;&#117;&#108;&#x63;&#x7a;&#46;&#110;&#101;&#x74;">&#x70;&#x61;&#x75;&#108;&#x40;&#x70;&#x61;&#117;&#x6c;&#x63;&#x7a;&#x2e;&#110;&#101;&#116;</a>&rdquo;</p>

<p>RUN apt-get -y update
RUN apt-get -y install curl build-essential libxml2-dev libxslt-dev git
RUN curl -L <a href="https://www.opscode.com/chef/install.sh">https://www.opscode.com/chef/install.sh</a> | bash
RUN echo &ldquo;gem: &mdash;no-ri &mdash;no-rdoc&rdquo; > ~/.gemrc
RUN /opt/chef/embedded/bin/gem install berkshelf
```</p>

<p><em>you&rsquo;ll notice I&rsquo;m using the embedded chef ruby to install the berkshelf gem,  this is a handy shortcut to avoid messing around with random ruby versions from your distributions packaging.</em></p>

<p>run <code>$ docker build -t paulczar/chef-solo .</code> to build a usable docker container from the above <code>Dockerfile</code>.</p>

<h3>Using chef-solo and berkshelf to build an application in a docker.io container</h3>

<p>My <a href="https://github.com/paulczar/docker-chef-solo">example application</a> will install <code>Kibana3</code> to your docker container.   I&rsquo;ll step through how it works below.</p>

<h4>Chef-Solo</h4>

<p>To run <code>chef-solo</code> successfully we require two files.   <code>solo.rb</code> to set up file locations, and `solo.json' to set up the json / run list required for your application.</p>

<p>``` ruby chef.rb
root = File.absolute_path(File.dirname(<strong>FILE</strong>))</p>

<p>file_cache_path root
cookbook_path root + &lsquo;/cookbooks&rsquo;
```</p>

<p>``` json chef.json
{
  &ldquo;kibana&rdquo;: {</p>

<pre><code>"webserver_listen": "0.0.0.0"
</code></pre>

<p>  },
  &ldquo;run_list&rdquo;: [</p>

<pre><code>"recipe[kibana::default]"
</code></pre>

<p>  ]
}
```</p>

<h4>Berkshelf</h4>

<p>To run <code>berkshelf</code> we need to build a Berksfile which contains a list of all the chef cookbooks required for the applocation.   Berkshelf will download these cookbooks to a local directory which will be usable by chef-solo.</p>

<p>``` ruby Berksfile
site :opscode</p>

<p>cookbook &lsquo;build-essential&rsquo;
cookbook &lsquo;apache2&rsquo;
cookbook &lsquo;git&rsquo;
cookbook &lsquo;kibana&rsquo;, github: &lsquo;lusis/chef-kibana&rsquo;
cookbook &lsquo;nginx&rsquo; , github: &lsquo;opscode-cookbooks/nginx&rsquo;
```</p>

<p><em>You can see some of the cookbooks are being pulled from the opscode repository,  whereas others are being pulled directly from github.</em></p>

<h4>Dockerfile</h4>

<p>All that&rsquo;s left now is to create a Dockerfile that will bring it all together.</p>

<p>``` ruby Dockerfile</p>

<h1>DOCKER-VERSION 0.5.3</h1>

<p>FROM paulczar/chef-client
MAINTAINER Paul Czarkowski &ldquo;<a href="&#109;&#x61;&#x69;&#108;&#116;&#111;&#x3a;&#x70;&#97;&#117;&#108;&#x40;&#112;&#97;&#x75;&#x6c;&#x63;&#x7a;&#x2e;&#x6e;&#101;&#116;">&#x70;&#97;&#x75;&#108;&#x40;&#x70;&#97;&#x75;&#x6c;&#x63;&#122;&#46;&#x6e;&#101;&#116;</a>&rdquo;</p>

<p>RUN apt-get -y update
ADD . /chef
RUN cd /chef &amp;&amp; /opt/chef/embedded/bin/berks install &mdash;path /chef/cookbooks
RUN chef-solo -c /chef/solo.rb -j /chef/solo.json
RUN echo &ldquo;daemon off;&rdquo; >> /etc/nginx/nginx.conf</p>

<p>CMD [&ldquo;nginx&rdquo;]
```</p>

<p>Run <code>$ docker build -t demo/kibana3 .</code> to build your application.</p>

<p>It will add the local files ( <code>solo.rb</code>, <code>solo.json</code>, <code>Berksfile</code> ) to /chef in the server and then call berkshelf to download the cookbooks and chef-solo to install your application.   Finally it will give <code>nginx</code> a directive to run in the foreground so that we don&rsquo;t have to do any sneaky prcess control to get it to work with the way <code>docker.io</code> runs processes.</p>

<p>To run the resultant <code>docker.io</code> container you simply need to run <code>$ docker run -d -p 80 demo/kibana3</code></p>
]]></content>
  </entry>
  
</feed>
